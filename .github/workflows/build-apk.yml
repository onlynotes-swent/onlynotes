name: Build APK

on:
  push:
    branches:
      - Fix/APK_BUILD
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Checkout the latest code
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up JDK 11 for Android build
      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17"

      # Cache Gradle dependencies
      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # Download Android SDK components
      - name: Set up Android SDK
        uses: android-actions/setup-android@v3
        with:
          accept-android-sdk-licenses: true
          cmdline-tools-version: "latest"  # Ensure you use the correct version if needed


      # Load google-services.json
      - name: Decode google-services.json
        env:
          GOOGLE_SERVICES: ${{ secrets.GOOGLE_SERVICES }}
        run: |
          echo "$GOOGLE_SERVICES" | base64 --decode > ./app/google-services.json

       # Grant execute permission for the gradlew script
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # Decode the Keystore from secret
      - name: Decode Keystore
        env:
          ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
        run: |
          mkdir -p ~/.android
          echo "$ANDROID_KEYSTORE_BASE64" | base64 --decode > ~/.android/debug.keystore

        # Generate SHA1 fingerprint from keystore
      - name: Generate SHA1
        run: keytool -list -v -keystore ~/.android/debug.keystore -storepass ${{ secrets.KEYSTORE_PASSWORD }} -keypass ${{ secrets.KEYSTORE_PASSWORD }}
      # Build the debug APK
      - name: Build APK
        run: ./gradlew assembleDebug

      #  jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore ~/.android/debug.keystore -storepass ${{ secrets.KEYSTORE_PASSWORD }} app/build/outputs/apk/debug/app-debug.apk

      # Sign APK with custom keystore
      #- name: Sign APK
        #run: |
            #apksigner sign \
              #--ks ~/.android/debug.jks \
           #   --ks-pass pass:${{ secrets.KEYSTORE_PASSWORD }} \
            #  app/build/outputs/apk/debug/app-debug.apk
     # - name: Sign APK
       # run: |
       #     jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 \
         #   -keystore  ~/.android/debug.keystore \
         #   -storepass ${{ secrets.KEYSTORE_PASSWORD }} \
          #  -keypass ${{ secrets.KEYSTORE_PASSWORD }} \
#            app/build/outputs/apk/debug/app-debug.apk ${{ secrets.KEY_ALIAS }}

      - name: Sign APK
        run: |
          $ANDROID_HOME/build-tools/$ANDROID_BUILD_TOOLS_VERSION/apksigner sign \
          --ks ~/.android/debug.keystore \
          --ks-pass pass:${{ secrets.KEYSTORE_PASSWORD }} \
          --key-pass pass:${{ secrets.KEYSTORE_PASSWORD }} \
          --out app/build/outputs/apk/debug/app-debug-signed.apk \
          app/build/outputs/apk/debug/app-debug.apk
          

      - name: Align APK
        run: |
          $ANDROID_HOME/build-tools/$ANDROID_BUILD_TOOLS_VERSION/zipalign -v 4 \
          app/build/outputs/apk/debug/app-debug-signed.apk \
          app/build/outputs/apk/debug/app-debug-aligned.apk   


      # Upload the debug APK as an artifact
      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: app-debug.apk
          path: app/build/outputs/apk/debug/app-debug-aligned.apk
